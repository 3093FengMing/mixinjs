plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.31-beta'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

base {
    archivesName = mod_id + "-main"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    api("dev.latvian.mods:rhino:$project.rhino_version") { transitive(false) }

    compileOnly("dev.latvian.mods:kubejs-neoforge:$project.kubejs_version")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            kubejs_version_range   : kubejs_version_range
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.register("buildCoreMod") {
    group "build"
    dependsOn build
    jar {
        exclude "me/fengming/mixinjs"
        exclude "assets"
        exclude "template.generated.mixins.json"
        exclude "mixinjs.mixins.json"
        exclude "kubejs.plugins.txt"
        exclude "icon.png"
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/neoforge.mods.toml"
        archiveBaseName = "mixinjs"
    }
}

tasks.register("buildMain") {
    group "build"
    dependsOn build
    jar {
        archiveFileName = "mixinjs-main.jar"
        exclude "me/fengming/mixinjs_coremod"
        exclude "META-INF/services"
        manifest.attributes(
                'MixinConnector': 'me.fengming.mixinjs.mixin.MixinJsConnector'
        )
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
